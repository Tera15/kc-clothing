{"ast":null,"code":"var _jsxFileName = \"/Users/ccatherall/Desktop/kc-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPage from '../collection/collection.component'; //match comes from route, it is one of three props passed into component nested in <Route />\n// match location and history passed as props from route.\n// telling route that the route name is going to be a parameter by using `${}`\n//to tell it which item exactly we want to fetch\n// `${match.path}` gives us current path, in this case /shop\n//`${match.path}:/categoryId` allows us to dynamicly pick the right category out of our reducer \n//:/catergoryId comes from the match.path object\n//console.log(match) and inspect the object to see where categoryID comes from to better understand \n// HoC\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching,\n      isCollectionsLoaded\n    } = this.props;\n    console.log(isCollectionFetching);\n    return (// render being used to use HoC spinner with collectionsOverview and CollectionPage components\n      // this is how to render props down through into the components\n      React.createElement(\"div\", {\n        className: \"shop-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n          isLoading: isCollectionFetching\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n          isLoading: !isCollectionsLoaded\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\n;\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/ccatherall/Desktop/kc-clothing/src/pages/shop/shop.component.jsx"],"names":["React","createStructuredSelector","Route","connect","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","WithSpinner","CollectionsOverviewContainer","CollectionPage","CollectionsOverviewWithSpinner","CollectionsOverview","CollectionPageWithSpinner","ShopPage","Component","componentDidMount","props","render","match","isCollectionFetching","isCollectionsLoaded","console","log","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAqE,iCAArE;AAEA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,cAAP,MAA2B,oCAA3B,C,CAOA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;;AACA,MAAMC,8BAA8B,GAAGH,WAAW,CAACI,mBAAD,CAAlD;AACA,MAAMC,yBAAyB,GAAGL,WAAW,CAACE,cAAD,CAA7C;;AAIA,MAAMI,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AAErCC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEX,MAAAA;AAAF,QAAiC,KAAKY,KAA5C;AAEAZ,IAAAA,0BAA0B;AAE1B;;AAEDa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,oBAAT;AAA+BC,MAAAA;AAA/B,QAAuD,KAAKJ,KAAlE;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ;AACF,WACE;AACA;AACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAED,KAAK,CAACK,IAAK,EAAjC;AAAoC,QAAA,MAAM,EAAGP,KAAD,IAAW,oBAAC,8BAAD;AAAgC,UAAA,SAAS,EAAEG;AAA3C,WAAqEH,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEE,KAAK,CAACK,IAAK,gBAA3B;AAA4C,QAAA,MAAM,EAAGP,KAAD,IAAW,oBAAC,yBAAD;AAA2B,UAAA,SAAS,EAAE,CAACI;AAAvC,WAAgEJ,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF;AAHJ;AAQC;;AApBoC;;AAqBtC;AAED,MAAMQ,eAAe,GAAGvB,wBAAwB,CAAC;AAC/CkB,EAAAA,oBAAoB,EAAEd,0BADyB;AAE/Ce,EAAAA,mBAAmB,EAAEd;AAF0B,CAAD,CAAhD;;AAKA,MAAMmB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCtB,EAAAA,0BAA0B,EAAE,MAAMsB,QAAQ,CAACtB,0BAAD;AADJ,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf","sourcesContent":["import React from 'react';\n\nimport { createStructuredSelector } from 'reselect';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'\n\nimport { fetchCollectionsStartAsync } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded} from '../../redux/shop/shop.selectors';\n\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverviewContainer from '../../components/collections-overview/collections-overview.container';\nimport CollectionPage from '../collection/collection.component';\n\n\n\n\n\n\n//match comes from route, it is one of three props passed into component nested in <Route />\n// match location and history passed as props from route.\n\n// telling route that the route name is going to be a parameter by using `${}`\n//to tell it which item exactly we want to fetch\n\n// `${match.path}` gives us current path, in this case /shop\n\n//`${match.path}:/categoryId` allows us to dynamicly pick the right category out of our reducer \n\n//:/catergoryId comes from the match.path object\n\n//console.log(match) and inspect the object to see where categoryID comes from to better understand \n\n// HoC\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\n\n\nclass ShopPage extends React.Component {\n\n  componentDidMount() {\n   const { fetchCollectionsStartAsync } = this.props\n   \n   fetchCollectionsStartAsync()\n   \n  }\n\n  render() {\n    const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\n    console.log(isCollectionFetching)\n  return  (\n    // render being used to use HoC spinner with collectionsOverview and CollectionPage components\n    // this is how to render props down through into the components\n      <div className='shop-page'>           \n        <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props}/>} />\n        <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\n      </div>\n    ); \n  }\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionsLoaded: selectIsCollectionsLoaded \n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync)\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}