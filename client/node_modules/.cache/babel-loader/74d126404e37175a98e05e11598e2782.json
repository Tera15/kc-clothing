{"ast":null,"code":"var _jsxFileName = \"/Users/ccatherall/Desktop/kc-clothing/src/pages/shop/shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.compnent';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; //match comes from route, it is one of three props passed into component nested in <Route />\n// match location and history passed as props from route.\n// telling route that the route name is going to be a parameter by using `${}`\n//to tell it which item exactly we want to fetch\n// `${match.path}` gives us current path, in this case /shop\n//`${match.path}:/categoryId` allows us to dynamicly pick the right category out of our reducer \n//:/catergoryId comes from the match.path object\n//console.log(match) and inspect the object to see where categoryID comes from to better understand \n// HoC\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshop = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // collections collection in firestore\n    // whenever snapShot updates, or mounts for the first time firebase sends snapShot of \n    //collection objects array at the time of mount/update\n\n    this.unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return (// render being used to use HoC spinner with collectionsOverview and CollectionPage components\n      // this is how to render props down through into the components\n      React.createElement(\"div\", {\n        className: \"shop-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: `${match.path}`,\n        render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n          isLoading: loading\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: `${match.path}/:collectionId`,\n        render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n          isLoading: loading\n        }, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }))\n    );\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/ccatherall/Desktop/kc-clothing/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","updateCollections","CollectionsOverview","CollectionPage","WithSpinner","firestore","convertCollectionsSnapshotToMap","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshop","componentDidMount","props","collectionRef","collection","onSnapshot","snapshot","collectionsMap","setState","render","match","path","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,mBAAP,MAAgC,qEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D,C,CAGA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;;AACA,MAAMC,8BAA8B,GAAGH,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMM,yBAAyB,GAAGJ,WAAW,CAACD,cAAD,CAA7C;;AAIA,MAAMM,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAEvCC,KAFuC,GAE/B;AACNC,MAAAA,OAAO,EAAE;AADH,KAF+B;AAAA,SAMrCC,uBANqC,GAMX,IANW;AAAA;;AAOrCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEb,MAAAA;AAAF,QAAwB,KAAKc,KAAnC;AACA,UAAMC,aAAa,GAAGX,SAAS,CAACY,UAAV,CAAqB,aAArB,CAAtB,CAFkB,CAEyC;AAC3D;AACA;;AACA,SAAKJ,uBAAL,GAA+BG,aAAa,CAACE,UAAd,CAAyB,MAAMC,QAAN,IAAkB;AACzE,YAAMC,cAAc,GAAGd,+BAA+B,CAACa,QAAD,CAAtD;AACAlB,MAAAA,iBAAiB,CAACmB,cAAD,CAAjB;AACD,WAAKC,QAAL,CAAc;AAAET,QAAAA,OAAO,EAAE;AAAX,OAAd;AACC,KAJ8B,CAA/B;AAKD;;AAEDU,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKR,KAAxB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACF,WACE;AACA;AACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,EAAjC;AAAoC,QAAA,MAAM,EAAGT,KAAD,IAAW,oBAAC,8BAAD;AAAgC,UAAA,SAAS,EAAEH;AAA3C,WAAwDG,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEQ,KAAK,CAACC,IAAK,gBAA3B;AAA4C,QAAA,MAAM,EAAGT,KAAD,IAAW,oBAAC,yBAAD;AAA2B,UAAA,SAAS,EAAEH;AAAtC,WAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF;AAHJ;AAQC;;AA9BoC;;AA+BtC;;AAED,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;AACtCzB,EAAAA,iBAAiB,EAAEmB,cAAc,IAAIM,QAAQ,CAACzB,iBAAiB,CAACmB,cAAD,CAAlB;AADP,CAAL,CAAnC;;AAIA,eAAepB,OAAO,CAAC,IAAD,EAAOyB,kBAAP,CAAP,CAAkChB,QAAlC,CAAf","sourcesContent":["import React from 'react';\n\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux'\n\nimport { updateCollections } from '../../redux/shop/shop.actions';\n\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.compnent';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\n\n\n//match comes from route, it is one of three props passed into component nested in <Route />\n// match location and history passed as props from route.\n\n// telling route that the route name is going to be a parameter by using `${}`\n//to tell it which item exactly we want to fetch\n\n// `${match.path}` gives us current path, in this case /shop\n\n//`${match.path}:/categoryId` allows us to dynamicly pick the right category out of our reducer \n\n//:/catergoryId comes from the match.path object\n\n//console.log(match) and inspect the object to see where categoryID comes from to better understand \n\n// HoC\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview)\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage)\n\n\n\nclass ShopPage extends React.Component {\n//React will invoke constructor and super for us.\nstate = {\n  loading: true\n}\n\n  unsubscribeFromSnapshop = null\n  componentDidMount() {\n    const { updateCollections } = this.props\n    const collectionRef = firestore.collection('collections'); // collections collection in firestore\n    // whenever snapShot updates, or mounts for the first time firebase sends snapShot of \n    //collection objects array at the time of mount/update\n    this.unsubscribeFromSnapshop = collectionRef.onSnapshot(async snapshot => {\n     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n     updateCollections(collectionsMap);\n    this.setState({ loading: false })\n    });\n  }\n\n  render() {\n    const { match, } = this.props;\n    const { loading } = this.state;\n  return  (\n    // render being used to use HoC spinner with collectionsOverview and CollectionPage components\n    // this is how to render props down through into the components\n      <div className='shop-page'>           \n        <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={loading} {...props}/>} />\n        <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={loading} {...props} />} />\n      </div>\n    ); \n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"]},"metadata":{},"sourceType":"module"}