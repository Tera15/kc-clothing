{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport { fetchCollectionsStart } from './shop/shop.sagas';\nimport rootReducer from './root-reducer'; //init sagas\n\nconst sagaMiddleware = createSagaMiddleware(); // only apply these middlewars in development and not in production\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\n;\nsagaMiddleware.run(fetchCollectionsStart);\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store); // session persistance \n\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/ccatherall/Desktop/kc-clothing/src/redux/store.js"],"names":["createStore","applyMiddleware","logger","persistStore","createSagaMiddleware","fetchCollectionsStart","rootReducer","sagaMiddleware","process","env","NODE_ENV","middlewares","push","run","store","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;AACA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C,C,CAIC;;AACA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCC,EAAAA,WAAW,CAACC,IAAZ,CAAiBV,MAAjB;AACH;;AAAA;AAEDK,cAAc,CAACM,GAAf,CAAmBR,qBAAnB;AAED,OAAO,MAAMS,KAAK,GAAGd,WAAW,CAACM,WAAD,EAAcL,eAAe,CAAC,GAAGU,WAAJ,CAA7B,CAAzB;AAEP,OAAO,MAAMI,SAAS,GAAGZ,YAAY,CAACW,KAAD,CAA9B,C,CAAuC;;AAE9C,eAAe;AAAEA,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist';\n\nimport createSagaMiddleware from 'redux-saga'\n\nimport { fetchCollectionsStart } from './shop/shop.sagas'\n\nimport rootReducer from './root-reducer';\n\n//init sagas\nconst sagaMiddleware = createSagaMiddleware()\n\n \n\n // only apply these middlewars in development and not in production\n if (process.env.NODE_ENV === 'development') {\n     middlewares.push(logger)\n };\n\n sagaMiddleware.run(fetchCollectionsStart)\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport const persistor = persistStore(store); // session persistance \n\nexport default { store, persistor };"]},"metadata":{},"sourceType":"module"}